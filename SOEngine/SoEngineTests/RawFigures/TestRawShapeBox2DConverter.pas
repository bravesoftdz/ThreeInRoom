unit TestRawShapeBox2DConverter;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, uSoTypes, uRawShapes, uRawShapeBaseConverter,
  System.Math,
  uGeometryClasses, UPhysics2D, uRawShapeBox2DConverter, uTestRawShapesHelpers;

type
  // Test methods for class TRawShapeBox2DShapeConverter

  TestTRawShapeBox2DShapeConverter = class(TTestCase)
  strict private
    FRawShapeBox2DShapeConverter: TRawShapeBox2DShapeConverter;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestConvertFromCircle;
    procedure TestConvertFromPoly;
    procedure TestConvertToCircle;
    procedure TestConvertToPoly;
  end;

implementation

procedure TestTRawShapeBox2DShapeConverter.SetUp;
begin
  FRawShapeBox2DShapeConverter := TRawShapeBox2DShapeConverter.Create;
end;

procedure TestTRawShapeBox2DShapeConverter.TearDown;
begin
  FRawShapeBox2DShapeConverter.Free;
  FRawShapeBox2DShapeConverter := nil;
end;

procedure TestTRawShapeBox2DShapeConverter.TestConvertFromCircle;
var
  ReturnValue: TRawShape;
  AObject: Tb2Shape;
begin
  AObject := TTestShapesHelpers.CreateBox2DCircle(78, -0, 3);
  ReturnValue := FRawShapeBox2DShapeConverter.ConvertFrom(AObject);

  Check(
    ReturnValue.IsEqualTo(TTestShapesHelpers.CreateRawCircle(78, -0, 3)),
    'Converting from Box2D to TRawShape is working wrong'
  );
end;

procedure TestTRawShapeBox2DShapeConverter.TestConvertFromPoly;
var
  ReturnValue: TRawShape;
  AObject: Tb2Shape;
begin
  AObject := TTestShapesHelpers.CreateBox2DPoly([23.0, 45.0, -5.0, -10.0, -100.0, -100.0, -100.0, 400.0, 50.0, 50.0]);
  ReturnValue := FRawShapeBox2DShapeConverter.ConvertFrom(AObject);

  Check(
    ReturnValue.IsEqualTo(
    TTestShapesHelpers.CreateRawPoly([23.0, 45.0, -5.0, -10.0, -100.0, -100.0, -100.0, 400.0, 50.0, 50.0])),
    'Converting from Box2D to TRawPoly is working wrong'
  );
end;

procedure TestTRawShapeBox2DShapeConverter.TestConvertToCircle;
var
  ReturnValue: Tb2Shape;
  AShape: TRawShape;
begin
  AShape := TTestShapesHelpers.CreateRawCircle(23, -1, 7);
  ReturnValue := FRawShapeBox2DShapeConverter.ConvertTo(AShape);

  Check(
    (ReturnValue.m_radius = 7) and
    (SameValue(Tb2CircleShape(ReturnValue).m_p.x, 23)) and
    (SameValue(Tb2CircleShape(ReturnValue).m_p.y, -1)) and
    (ReturnValue.ClassType = Tb2CircleShape),
    'Convert to Box2D Circle works incorrect'
  );
end;

procedure TestTRawShapeBox2DShapeConverter.TestConvertToPoly;
var
  ReturnValue: Tb2Shape;
  AShape: TRawShape;
  i: Integer;
  vArr: TArray<TPointF>;
begin
  AShape := TTestShapesHelpers.CreateRawPoly([23, 23, -23, 7, -45, -45, 60, -100]);
  ReturnValue := FRawShapeBox2DShapeConverter.ConvertTo(AShape);

  SetLength(vArr, Tb2PolygonShape(ReturnValue).m_count);
  for i := 0 to Tb2PolygonShape(ReturnValue).m_count - 1 do
  begin
    vArr[i].X := Tb2PolygonShape(ReturnValue).m_vertices[i].x;
    vArr[i].Y := Tb2PolygonShape(ReturnValue).m_vertices[i].y;
  end;

  Check(
    TTestShapesHelpers.IsPointArrayEquals(vArr, AShape.GetData) and
    (ReturnValue.ClassType = Tb2PolygonShape),
    'Convert RawShape to Box2DPolygon works incorrect'
   );
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTRawShapeBox2DShapeConverter.Suite);
end.

